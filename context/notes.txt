1. Install HardHat
    // run npx hard
    // if everything goes good , then there will be a hardhat.config file created
2. Find the scripts folder containing the deploy.js file
3. HardHat will automatically create Lock.sol file inside the contracts folder
4. Delete Lock.sol and create new file called Voting.sol
    // Add code 
5. https://docs.openzeppelin.com/contracts/4.x/api/utils , explain OpenZeppelin is a library for secure smart contract development
6. https://ethereum.stackexchange.com/questions/97186/what-is-the-reason-behind-writing-using-counters-for-counters-counters-when-us
7. npm install @openzeppelin/contracts






















/////////////////////////
// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
import hre from "hardhat";
const lock = await ethers.deployContract("Lock", [unlockTime], {
  value: lockedAmount,
});

await lock.waitForDeployment();

console.log(
  `Lock with ${ethers.formatEther(
    lockedAmount
  )}ETH and unlock timestamp ${unlockTime} deployed to ${lock.target}`
);


//// old createPoll()

import React from 'react'
import { useNavigate } from 'react-router-dom'
import { ethers } from 'hardhat';

async function createPoll1() {
  // Load the contract
  const contractAddress = '0x707928f549030e728c170e215CfF7ddd8F1f86BB'; // Replace with your deployed contract address
  const VotingApp = await ethers.getContractFactory("VotingApp");
  const contract = VotingApp.attach(contractAddress);

  // Example poll details
  const timestamp = Date.now(); // Get current timestamp
  const randomChars = Math.random().toString(36).substring(7); // Generate random characters
  const pollId = ethers.utils.formatBytes32String(`${timestamp}-${randomChars}`);

  const title = "Example Poll Title 2";
  const description = "Example Poll Description 2 ";
  const durationInSeconds = 3600; // 1 hour, change as needed

  // Create the poll
  await contract.createPoll(pollId, title, description, durationInSeconds);
  console.log(`Poll created with ID: ${pollId}`);
}

function CreatePoll() {
  const nav = useNavigate();

  const createPoll = ()=>
  {
    createPoll1();
    nav('/tasks');
  } 

  return (
    <div className='MainContainer'>
        <h1>Create your own poll</h1>
        <div className='SubContainer'>
            <label><h2 className="noVertMargin">Poll Title</h2>
                <input className="custom-input" placeholder='Poll Title'></input>
            </label>
            <label><h2>Description</h2>
                <input className="custom-input" placeholder='Description'></input>
            </label>
            <label><h2>Duration</h2>
                <input type="datetime-local" className="custom-input" placeholder='Description'></input>
            </label>
            
            <button onClick={()=>{createPoll()}}>Save and Launch Poll</button>
        </div>
    </div>
  )
}

export default CreatePoll